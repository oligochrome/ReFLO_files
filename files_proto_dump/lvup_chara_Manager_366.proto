syntax = "proto3";

package ReFLO;

//  Manager_366
message lvup_charaFLO {
	uint32	lvup_chara_id	= 1;
	uint32	objid	= 2;
	int32	level	= 3;
	float	vector[0]	= 4;		//	Single
	float	vector[1]	= 5;		//	Single
	float	vector[2]	= 6;		//	Single
	float	vector[3]	= 7;		//	Single
	float	vector[4]	= 8;		//	Single
	float	vector[5]	= 9;		//	Single
	float	vector[6]	= 10;		//	Single
	float	vector[7]	= 11;		//	Single
	float	vector[8]	= 12;		//	Single
	float	vector[9]	= 13;		//	Single
	float	vector[10]	= 14;		//	Single
	float	vector[0xb]	= 15;		//	Single
	float	vector[0xc]	= 16;		//	Single
	float	vector[0xd]	= 17;		//	Single
	float	vector[0xe]	= 18;		//	Single
	float	vector[0xf]	= 19;		//	Single
	float	vector[0x10]	= 20;		//	Single
	float	vector[0x11]	= 21;		//	Single
	float	vector[0x12]	= 22;		//	Single
	float	vector[0x13]	= 23;		//	Single
	float	vector[0x14]	= 24;		//	Single
	float	vector[0x15]	= 25;		//	Single
	float	vector[0x16]	= 26;		//	Single
	float	vector[0x17]	= 27;		//	Single
	float	vector[0x18]	= 28;		//	Single
	float	vector[0x19]	= 29;		//	Single
	float	vector[0x1a]	= 30;		//	Single
	float	vector[0x1b]	= 31;		//	Single
	float	vector[0x1c]	= 32;		//	Single
	float	vector[0x1d]	= 33;		//	Single
	float	vector[0x1e]	= 34;		//	Single
	float	vector[0x1f]	= 35;		//	Single
	float	vector[0]	= 36;		//	Single
	int32	vector[1]	= 37;
	int32	vector[2]	= 38;
	int32	vector[3]	= 39;
	int32	vector[4]	= 40;
	int32	vector[5]	= 41;
	uint32	vector[0]	= 42;
	uint32	vector[1]	= 43;
	uint32	vector[2]	= 44;
	int32	int_values	= 45;
	float	vector[0]	= 46;		//	Single
	float	vector[1]	= 47;		//	Single
	float	vector[2]	= 48;		//	Single
	float	vector[3]	= 49;		//	Single
	float	vector[4]	= 50;		//	Single
	float	vector[5]	= 51;		//	Single
	float	vector[6]	= 52;		//	Single
	uint32	resist_efficacy_type	= 53;
}

message tablelvup_charaFLO { repeated lvup_charaFLO tableLvupChara = 1; }

/*
cd E:\OneDrive\FLO\ReFLO\ReFLO\Proto\Def; ..\..\..\packages\Google.Protobuf.Tools.3.19.4\tools\windows_x64\protoc --proto_path=. --csharp_out=..\Gen lvup_chara_Manager_366.proto


			   case "lvup_chara.bytes":
					ii = 0;
					tablelvup_chara tblManager366 = new tablelvup_chara { };
					using (MemoryStream sr = new MemoryStream(data))
					{
						using (BinaryReader br = new BinaryReader(sr, Encdg))
						{
							uint tableCount = br.ReadUInt32();
							if (DumpDEBUG) { Console.Error.WriteLine("Expected: {0}", tableCount); }
							while (br.BaseStream.Position != br.BaseStream.Length)
							{
								tblManager366.TableLvupChara.Add(new lvup_charaFLO
								{
									LvupCharaId = br.ReadUInt32(),
									Objid = br.ReadUInt32(),
									Level = br.ReadInt32(),
									Vector[0] = br.ReadSingle(),
									Vector[1] = br.ReadSingle(),
									Vector[2] = br.ReadSingle(),
									Vector[3] = br.ReadSingle(),
									Vector[4] = br.ReadSingle(),
									Vector[5] = br.ReadSingle(),
									Vector[6] = br.ReadSingle(),
									Vector[7] = br.ReadSingle(),
									Vector[8] = br.ReadSingle(),
									Vector[9] = br.ReadSingle(),
									Vector[10] = br.ReadSingle(),
									Vector[0xb] = br.ReadSingle(),
									Vector[0xc] = br.ReadSingle(),
									Vector[0xd] = br.ReadSingle(),
									Vector[0xe] = br.ReadSingle(),
									Vector[0xf] = br.ReadSingle(),
									Vector[0x10] = br.ReadSingle(),
									Vector[0x11] = br.ReadSingle(),
									Vector[0x12] = br.ReadSingle(),
									Vector[0x13] = br.ReadSingle(),
									Vector[0x14] = br.ReadSingle(),
									Vector[0x15] = br.ReadSingle(),
									Vector[0x16] = br.ReadSingle(),
									Vector[0x17] = br.ReadSingle(),
									Vector[0x18] = br.ReadSingle(),
									Vector[0x19] = br.ReadSingle(),
									Vector[0x1a] = br.ReadSingle(),
									Vector[0x1b] = br.ReadSingle(),
									Vector[0x1c] = br.ReadSingle(),
									Vector[0x1d] = br.ReadSingle(),
									Vector[0x1e] = br.ReadSingle(),
									Vector[0x1f] = br.ReadSingle(),
									IntValues = br.ReadInt32(),
									ResistEfficacyType = br.ReadUInt32()
								});
								ii += 1;
							}
							if (DumpDEBUG) { Console.Error.WriteLine("Total = {0}", ii); }
							if (tableCount != ii) { Console.Error.WriteLine("ERROR: {0} ENTRY COUNTS DO NOT MATCH! {1} / {2}", baseName, ii, tableCount); }
						}
					}
					if (outputJSON) { File.WriteAllText(outFile, JsonConvert.SerializeObject(tblManager366, Formatting.Indented)); }
					return tblManager366;
*/