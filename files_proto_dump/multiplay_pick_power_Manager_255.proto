syntax = "proto3";

package ReFLO;

//  Manager_255
message multiplay_pick_powerFLO {
	uint32	multiplay_pick_power_id	= 1;
	uint32	uniqid	= 2;
	float	vector[0]	= 3;		//	Single
	float	vector[1]	= 4;		//	Single
	float	vector[2]	= 5;		//	Single
	float	vector[3]	= 6;		//	Single
	float	vector[4]	= 7;		//	Single
	float	vector[5]	= 8;		//	Single
}

message tablemultiplay_pick_powerFLO { repeated multiplay_pick_powerFLO tableMultiplayPickPower = 1; }

/*
cd E:\OneDrive\FLO\ReFLO\ReFLO\Proto\Def; ..\..\..\packages\Google.Protobuf.Tools.3.19.4\tools\windows_x64\protoc --proto_path=. --csharp_out=..\Gen multiplay_pick_power_Manager_255.proto


			   case "multiplay_pick_power.bytes":
					ii = 0;
					tablemultiplay_pick_power tblManager255 = new tablemultiplay_pick_power { };
					using (MemoryStream sr = new MemoryStream(data))
					{
						using (BinaryReader br = new BinaryReader(sr, Encdg))
						{
							uint tableCount = br.ReadUInt32();
							if (DumpDEBUG) { Console.Error.WriteLine("Expected: {0}", tableCount); }
							while (br.BaseStream.Position != br.BaseStream.Length)
							{
								tblManager255.TableMultiplayPickPower.Add(new multiplay_pick_powerFLO
								{
									MultiplayPickPowerId = br.ReadUInt32(),
									Uniqid = br.ReadUInt32(),
									Vector[0] = br.ReadSingle(),
									Vector[1] = br.ReadSingle(),
									Vector[2] = br.ReadSingle(),
									Vector[3] = br.ReadSingle(),
									Vector[4] = br.ReadSingle(),
									Vector[5] = br.ReadSingle()
								});
								ii += 1;
							}
							if (DumpDEBUG) { Console.Error.WriteLine("Total = {0}", ii); }
							if (tableCount != ii) { Console.Error.WriteLine("ERROR: {0} ENTRY COUNTS DO NOT MATCH! {1} / {2}", baseName, ii, tableCount); }
						}
					}
					if (outputJSON) { File.WriteAllText(outFile, JsonConvert.SerializeObject(tblManager255, Formatting.Indented)); }
					return tblManager255;
*/