syntax = "proto3";

package ReFLO;

//  Manager_213
message param_chara_voiceFLO {
	uint32	param_chara_voice_id	= 1;
	uint32	uniqid	= 2;
	uint32	vector[0]	= 3;
	uint32	vector[1]	= 4;
	uint32	vector[2]	= 5;
	uint32	vector[3]	= 6;
	uint32	vector[4]	= 7;
	uint32	vector[5]	= 8;
	uint32	vector[6]	= 9;
	uint32	vector[7]	= 10;
	uint32	vector[8]	= 11;
	uint32	vector[9]	= 12;
	uint32	vector[10]	= 13;
	uint32	vector[0xb]	= 14;
	uint32	vector[0xc]	= 15;
	uint32	vector[0xd]	= 16;
	uint32	vector[0xe]	= 17;
	uint32	vector[0xf]	= 18;
	uint32	vector[0x10]	= 19;
	uint32	vector[0x11]	= 20;
	uint32	vector[0x12]	= 21;
	uint32	vector[0x13]	= 22;
	uint32	vector[0x14]	= 23;
	uint32	vector[0x15]	= 24;
	uint32	vector[0x16]	= 25;
	uint32	vector[0x17]	= 26;
	uint32	vector[0x18]	= 27;
	uint32	vector[0x19]	= 28;
	uint32	vector[0x1a]	= 29;
	uint32	vector[0x1b]	= 30;
	uint32	vector[0x1c]	= 31;
	uint32	vector[0x1d]	= 32;
	uint32	vector[0x1e]	= 33;
	uint32	vector[0x1f]	= 34;
}

message tableparam_chara_voiceFLO { repeated param_chara_voiceFLO tableParamCharaVoice = 1; }

/*
cd E:\OneDrive\FLO\ReFLO\ReFLO\Proto\Def; ..\..\..\packages\Google.Protobuf.Tools.3.19.4\tools\windows_x64\protoc --proto_path=. --csharp_out=..\Gen param_chara_voice_Manager_213.proto


			   case "param_chara_voice.bytes":
					ii = 0;
					tableparam_chara_voice tblManager213 = new tableparam_chara_voice { };
					using (MemoryStream sr = new MemoryStream(data))
					{
						using (BinaryReader br = new BinaryReader(sr, Encdg))
						{
							uint tableCount = br.ReadUInt32();
							if (DumpDEBUG) { Console.Error.WriteLine("Expected: {0}", tableCount); }
							while (br.BaseStream.Position != br.BaseStream.Length)
							{
								tblManager213.TableParamCharaVoice.Add(new param_chara_voiceFLO
								{
									ParamCharaVoiceId = br.ReadUInt32(),
									Uniqid = br.ReadUInt32(),
									Vector[0] = br.ReadUInt32(),
									Vector[1] = br.ReadUInt32(),
									Vector[2] = br.ReadUInt32(),
									Vector[3] = br.ReadUInt32(),
									Vector[4] = br.ReadUInt32(),
									Vector[5] = br.ReadUInt32(),
									Vector[6] = br.ReadUInt32(),
									Vector[7] = br.ReadUInt32(),
									Vector[8] = br.ReadUInt32(),
									Vector[9] = br.ReadUInt32(),
									Vector[10] = br.ReadUInt32(),
									Vector[0xb] = br.ReadUInt32(),
									Vector[0xc] = br.ReadUInt32(),
									Vector[0xd] = br.ReadUInt32(),
									Vector[0xe] = br.ReadUInt32(),
									Vector[0xf] = br.ReadUInt32(),
									Vector[0x10] = br.ReadUInt32(),
									Vector[0x11] = br.ReadUInt32(),
									Vector[0x12] = br.ReadUInt32(),
									Vector[0x13] = br.ReadUInt32(),
									Vector[0x14] = br.ReadUInt32(),
									Vector[0x15] = br.ReadUInt32(),
									Vector[0x16] = br.ReadUInt32(),
									Vector[0x17] = br.ReadUInt32(),
									Vector[0x18] = br.ReadUInt32(),
									Vector[0x19] = br.ReadUInt32(),
									Vector[0x1a] = br.ReadUInt32(),
									Vector[0x1b] = br.ReadUInt32(),
									Vector[0x1c] = br.ReadUInt32(),
									Vector[0x1d] = br.ReadUInt32(),
									Vector[0x1e] = br.ReadUInt32(),
									Vector[0x1f] = br.ReadUInt32()
								});
								ii += 1;
							}
							if (DumpDEBUG) { Console.Error.WriteLine("Total = {0}", ii); }
							if (tableCount != ii) { Console.Error.WriteLine("ERROR: {0} ENTRY COUNTS DO NOT MATCH! {1} / {2}", baseName, ii, tableCount); }
						}
					}
					if (outputJSON) { File.WriteAllText(outFile, JsonConvert.SerializeObject(tblManager213, Formatting.Indented)); }
					return tblManager213;
*/