syntax = "proto3";

package ReFLO;

//  Manager_199
message param_pickFLO {
	uint32	param_pick_id	= 1;
	uint32	uniqid	= 2;
	uint32	contentsId	= 3;
	uint32	picktype	= 4;
	float	rot_r	= 5;		//	Single
	float	eff_camera_zoffset	= 6;		//	Single
	int32	sweetspos_count	= 7;
	float	breaktime	= 8;		//	Single
	uint32	enemyRankID	= 9;
	uint32	bgmID	= 10;
	uint32	landing_effect	= 11;
	uint32	landing_se	= 12;
	uint32	repopType	= 13;
	uint32	lifeDamageCoefID	= 14;
	uint32	attributeID	= 15;
}

message tableparam_pickFLO { repeated param_pickFLO tableParamPick = 1; }

/*
cd E:\OneDrive\FLO\ReFLO\ReFLO\Proto\Def; ..\..\..\packages\Google.Protobuf.Tools.3.19.4\tools\windows_x64\protoc --proto_path=. --csharp_out=..\Gen param_pick_Manager_199.proto


			   case "param_pick.bytes":
					ii = 0;
					tableparam_pick tblManager199 = new tableparam_pick { };
					using (MemoryStream sr = new MemoryStream(data))
					{
						using (BinaryReader br = new BinaryReader(sr, Encdg))
						{
							uint tableCount = br.ReadUInt32();
							if (DumpDEBUG) { Console.Error.WriteLine("Expected: {0}", tableCount); }
							while (br.BaseStream.Position != br.BaseStream.Length)
							{
								tblManager199.TableParamPick.Add(new param_pickFLO
								{
									ParamPickId = br.ReadUInt32(),
									Uniqid = br.ReadUInt32(),
									ContentsId = br.ReadUInt32(),
									Picktype = br.ReadUInt32(),
									RotR = br.ReadSingle(),
									EffCameraZoffset = br.ReadSingle(),
									SweetsposCount = br.ReadInt32(),
									Breaktime = br.ReadSingle(),
									EnemyRankID = br.ReadUInt32(),
									BgmID = br.ReadUInt32(),
									LandingEffect = br.ReadUInt32(),
									LandingSe = br.ReadUInt32(),
									RepopType = br.ReadUInt32(),
									LifeDamageCoefID = br.ReadUInt32(),
									AttributeID = br.ReadUInt32()
								});
								ii += 1;
							}
							if (DumpDEBUG) { Console.Error.WriteLine("Total = {0}", ii); }
							if (tableCount != ii) { Console.Error.WriteLine("ERROR: {0} ENTRY COUNTS DO NOT MATCH! {1} / {2}", baseName, ii, tableCount); }
						}
					}
					if (outputJSON) { File.WriteAllText(outFile, JsonConvert.SerializeObject(tblManager199, Formatting.Indented)); }
					return tblManager199;
*/