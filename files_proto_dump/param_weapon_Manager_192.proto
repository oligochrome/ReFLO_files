syntax = "proto3";

package ReFLO;

//  Manager_192
message param_weaponFLO {
	uint32	param_weapon_id	= 1;
	uint32	unqId	= 2;
	uint32	contentsId	= 3;
	uint32	sexId	= 4;
	uint32	dropObjectId	= 5;
	uint32	attrId	= 6;
	repeated int32	Elements	= 7;	// int32 [0-8]
	repeated uint32	efficacyIds	= 8;	// uint32 [0-2]
	uint32	grantEfficacyType	= 9;
	uint32	lvupType	= 10;
	uint32	bitfield0	= 11;
	float	uiScale	= 12;		//	Single
	float	uiHeight	= 13;		//	Single
	float	uiTransOffsetX	= 14;		//	Single
	float	uiTransOffsetZ	= 15;		//	Single
	uint32	bitfield1	= 16;
	uint32	skillBattleChageId1	= 17;
	sint32	skillBattleChageLV1	= 18;		//	SByte
	uint32	skillBattleChageId2	= 19;
	sint32	skillBattleChageLV2	= 20;		//	SByte
	uint32	skillPickChageId1	= 21;
	sint32	skillPickChageLV1	= 22;		//	SByte
	uint32	skillPickChageId2	= 23;
	sint32	skillPickChageLV2	= 24;		//	SByte
	uint32	weaponBtlTensionId	= 25;
	uint32	weaponBtlChageId1	= 26;
	uint32	weaponBtlChageId2	= 27;
	uint32	weaponPickTensionId	= 28;
	uint32	weaponPickChageId1	= 29;
	uint32	weaponPickChageId2	= 30;
	int32	stardustFlag		= 31;		//	Byte
	uint32	equipLicense		= 32;
	uint32	bitfield2			= 33;
	int32	canNotChangeAppearance	= 34;		//	Byte
	uint32	uniqueAuraResId		= 35;
	int32	canNotShowAura		= 36;		//	Byte
	repeated uint32	lot_efficacyIds	= 37;		// uint32 [0-2]
	uint32	spType	= 38;
	uint32	recastSkillId	= 39;
}

message tableparam_weaponFLO { repeated param_weaponFLO tableParamWeapon = 1; }

/*
cd E:\OneDrive\FLO\ReFLO\ReFLO\Proto\Def; ..\..\..\packages\Google.Protobuf.Tools.3.19.4\tools\windows_x64\protoc --proto_path=. --csharp_out=..\Gen param_weapon_Manager_192.proto


			   case "param_weapon.bytes":
					ii = 0;
					tableparam_weapon tblManager192 = new tableparam_weapon { };
					using (MemoryStream sr = new MemoryStream(data))
					{
						using (BinaryReader br = new BinaryReader(sr, Encdg))
						{
							uint tableCount = br.ReadUInt32();
							if (DumpDEBUG) { Console.Error.WriteLine("Expected: {0}", tableCount); }
							while (br.BaseStream.Position != br.BaseStream.Length)
							{
								tblManager192.TableParamWeapon.Add(new param_weaponFLO
								{
									ParamWeaponId = br.ReadUInt32(),
									UnqId = br.ReadUInt32(),
									ContentsId = br.ReadUInt32(),
									SexId = br.ReadUInt32(),
									DropObjectId = br.ReadUInt32(),
									AttrId = br.ReadUInt32(),
									//				0				1				2				3				 4				5				6				7					8
									IVector = { br.ReadInt32(), br.ReadInt32(), br.ReadInt32(), br.ReadInt32(), br.ReadInt32(), br.ReadInt32(), br.ReadInt32(), br.ReadInt32(), br.ReadInt32() },
									U1vector[1] = { br.ReadUInt32(), br.ReadUInt32(), br.ReadInt32() },
									GrantEfficacyType = br.ReadUInt32(),
									LvupType = br.ReadUInt32(),
									Bitfield0 = br.ReadUInt32(),
									UiScale = br.ReadSingle(),
									UiHeight = br.ReadSingle(),
									UiTransOffsetX = br.ReadSingle(),
									UiTransOffsetZ = br.ReadSingle(),
									Bitfield1 = br.ReadUInt32(),
									SkillBattleChageId1 = br.ReadUInt32(),
									SkillBattleChageLV1 = br.ReadSByte(),
									SkillBattleChageId2 = br.ReadUInt32(),
									SkillBattleChageLV2 = br.ReadSByte(),
									SkillPickChageId1 = br.ReadUInt32(),
									SkillPickChageLV1 = br.ReadSByte(),
									SkillPickChageId2 = br.ReadUInt32(),
									SkillPickChageLV2 = br.ReadSByte(),
									WeaponBtlTensionId = br.ReadUInt32(),
									WeaponBtlChageId1 = br.ReadUInt32(),
									WeaponBtlChageId2 = br.ReadUInt32(),
									WeaponPickTensionId = br.ReadUInt32(),
									WeaponPickChageId1 = br.ReadUInt32(),
									WeaponPickChageId2 = br.ReadUInt32(),
									StardustFlag = br.ReadByte(),
									EquipLicense = br.ReadUInt32(),
									Bitfield2 = br.ReadUInt32(),
									CanNotChangeAppearance = br.ReadByte(),
									UniqueAuraResId = br.ReadUInt32(),
									CanNotShowAura = br.ReadByte(),
									U2vector[1] = { br.ReadUInt32(), br.ReadUInt32(), br.ReadInt32() },
									SpType = br.ReadUInt32(),
									RecastSkillId = br.ReadUInt32()
								});
								ii += 1;
							}
							if (DumpDEBUG) { Console.Error.WriteLine("Total = {0}", ii); }
							if (tableCount != ii) { Console.Error.WriteLine("ERROR: {0} ENTRY COUNTS DO NOT MATCH! {1} / {2}", baseName, ii, tableCount); }
						}
					}
					if (outputJSON) { File.WriteAllText(outFile, JsonConvert.SerializeObject(tblManager192, Formatting.Indented)); }
					return tblManager192;
*/