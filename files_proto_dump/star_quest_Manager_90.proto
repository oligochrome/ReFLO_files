syntax = "proto3";

package ReFLO;

//  Manager_90
message star_questFLO {
	uint32	star_quest_id	= 1;
	uint32	uniqid	= 2;
	uint32	starQuestType	= 3;
	uint32	life	= 4;
	uint32	licenseRank	= 5;
	uint32	title	= 6;
	uint32	fastTravelField	= 7;
	uint32	eventScript	= 8;
	int32	sortWeight	= 9;
	int32	unlock	= 10;
	int32	secret	= 11;
	uint32	unlockFlag	= 12;
	uint32	unlockGodMission	= 13;
	uint32	unlockTextId	= 14;
	int32	cost	= 15;
	uint32	advmapId	= 16;
	int32	recommendLevel	= 17;
	int32	questEnable	= 18;
	int32	openLevel	= 19;
	int32	masterOpen	= 20;
}

message tablestar_questFLO { repeated star_questFLO tableStarQuest = 1; }

/*
cd E:\OneDrive\FLO\ReFLO\ReFLO\Proto\Def; ..\..\..\packages\Google.Protobuf.Tools.3.19.4\tools\windows_x64\protoc --proto_path=. --csharp_out=..\Gen star_quest_Manager_90.proto


			   case "star_quest.bytes":
					ii = 0;
					tablestar_quest tblManager90 = new tablestar_quest { };
					using (MemoryStream sr = new MemoryStream(data))
					{
						using (BinaryReader br = new BinaryReader(sr, Encdg))
						{
							uint tableCount = br.ReadUInt32();
							if (DumpDEBUG) { Console.Error.WriteLine("Expected: {0}", tableCount); }
							while (br.BaseStream.Position != br.BaseStream.Length)
							{
								tblManager90.TableStarQuest.Add(new star_questFLO
								{
									StarQuestId = br.ReadUInt32(),
									Uniqid = br.ReadUInt32(),
									StarQuestType = br.ReadUInt32(),
									Life = br.ReadUInt32(),
									LicenseRank = br.ReadUInt32(),
									Title = br.ReadUInt32(),
									FastTravelField = br.ReadUInt32(),
									EventScript = br.ReadUInt32(),
									SortWeight = br.ReadInt32(),
									Unlock = br.ReadInt32(),
									Secret = br.ReadInt32(),
									UnlockFlag = br.ReadUInt32(),
									UnlockGodMission = br.ReadUInt32(),
									UnlockTextId = br.ReadUInt32(),
									Cost = br.ReadInt32(),
									AdvmapId = br.ReadUInt32(),
									RecommendLevel = br.ReadInt32(),
									QuestEnable = br.ReadInt32(),
									OpenLevel = br.ReadInt32(),
									MasterOpen = br.ReadInt32()
								});
								ii += 1;
							}
							if (DumpDEBUG) { Console.Error.WriteLine("Total = {0}", ii); }
							if (tableCount != ii) { Console.Error.WriteLine("ERROR: {0} ENTRY COUNTS DO NOT MATCH! {1} / {2}", baseName, ii, tableCount); }
						}
					}
					if (outputJSON) { File.WriteAllText(outFile, JsonConvert.SerializeObject(tblManager90, Formatting.Indented)); }
					return tblManager90;
*/