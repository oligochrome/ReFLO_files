syntax = "proto3";

package ReFLO;

//  Manager_27
message village_workFLO {
	uint32	village_work_id	= 1;
	uint32	workId	= 2;
	uint32	workName	= 3;
	uint32	workInfo	= 4;
	uint32	difficulty	= 5;
	uint32	success	= 6;
	uint32	needTime	= 7;
	uint32	getValue	= 8;
	uint32	getItem	= 9;
	int32	repetition	= 10;		//	Byte
	int32	memberCount	= 11;		//	Byte
	uint32	mapId	= 12;
	uint32	NeedRich	= 13;
	uint32	NeedCharaLevel	= 14;
	uint32	FacilityId1	= 15;
	int32	FacilityLevel1	= 16;		//	Byte
	uint32	FacilityId2	= 17;
	int32	FacilityLevel2	= 18;		//	Byte
	uint32	mainImageId	= 19;
	int32	isTraining	= 20;		//	Byte
	int32	isUsingKigurumi	= 21;		//	Byte
	uint32	sortNumber	= 22;
}

message tablevillage_workFLO { repeated village_workFLO tableVillageWork = 1; }

/*
cd E:\OneDrive\FLO\ReFLO\ReFLO\Proto\Def; ..\..\..\packages\Google.Protobuf.Tools.3.19.4\tools\windows_x64\protoc --proto_path=. --csharp_out=..\Gen village_work_Manager_27.proto


			   case "village_work.bytes":
					ii = 0;
					tablevillage_work tblManager27 = new tablevillage_work { };
					using (MemoryStream sr = new MemoryStream(data))
					{
						using (BinaryReader br = new BinaryReader(sr, Encdg))
						{
							uint tableCount = br.ReadUInt32();
							if (DumpDEBUG) { Console.Error.WriteLine("Expected: {0}", tableCount); }
							while (br.BaseStream.Position != br.BaseStream.Length)
							{
								tblManager27.TableVillageWork.Add(new village_workFLO
								{
									VillageWorkId = br.ReadUInt32(),
									WorkId = br.ReadUInt32(),
									WorkName = br.ReadUInt32(),
									WorkInfo = br.ReadUInt32(),
									Difficulty = br.ReadUInt32(),
									Success = br.ReadUInt32(),
									NeedTime = br.ReadUInt32(),
									GetValue = br.ReadUInt32(),
									GetItem = br.ReadUInt32(),
									Repetition = br.ReadByte(),
									MemberCount = br.ReadByte(),
									MapId = br.ReadUInt32(),
									NeedRich = br.ReadUInt32(),
									NeedCharaLevel = br.ReadUInt32(),
									FacilityId1 = br.ReadUInt32(),
									FacilityLevel1 = br.ReadByte(),
									FacilityId2 = br.ReadUInt32(),
									FacilityLevel2 = br.ReadByte(),
									MainImageId = br.ReadUInt32(),
									IsTraining = br.ReadByte(),
									IsUsingKigurumi = br.ReadByte(),
									SortNumber = br.ReadUInt32()
								});
								ii += 1;
							}
							if (DumpDEBUG) { Console.Error.WriteLine("Total = {0}", ii); }
							if (tableCount != ii) { Console.Error.WriteLine("ERROR: {0} ENTRY COUNTS DO NOT MATCH! {1} / {2}", baseName, ii, tableCount); }
						}
					}
					if (outputJSON) { File.WriteAllText(outFile, JsonConvert.SerializeObject(tblManager27, Formatting.Indented)); }
					return tblManager27;
*/