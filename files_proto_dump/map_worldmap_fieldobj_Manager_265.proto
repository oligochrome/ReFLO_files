syntax = "proto3";

package ReFLO;

//  Manager_265
message map_worldmap_fieldobjFLO {
	uint32	map_worldmap_fieldobj_id	= 1;
	uint32	fieldEventId	= 2;
	uint32	mapId	= 3;
	uint32	objId	= 4;
	float	posX	= 5;		//	Single
	float	posY	= 6;		//	Single
	float	objScale	= 7;		//	Single
	float	objRotateY	= 8;		//	Single
	float	objTouchWidth	= 9;		//	Single
	float	objTouchHeight	= 10;		//	Single
	float	actionPeriod	= 11;		//	Single
	uint32	actionId	= 12;
}

message tablemap_worldmap_fieldobjFLO { repeated map_worldmap_fieldobjFLO tableMapWorldmapFieldobj = 1; }

/*
cd E:\OneDrive\FLO\ReFLO\ReFLO\Proto\Def; ..\..\..\packages\Google.Protobuf.Tools.3.19.4\tools\windows_x64\protoc --proto_path=. --csharp_out=..\Gen map_worldmap_fieldobj_Manager_265.proto


			   case "map_worldmap_fieldobj.bytes":
					ii = 0;
					tablemap_worldmap_fieldobj tblManager265 = new tablemap_worldmap_fieldobj { };
					using (MemoryStream sr = new MemoryStream(data))
					{
						using (BinaryReader br = new BinaryReader(sr, Encdg))
						{
							uint tableCount = br.ReadUInt32();
							if (DumpDEBUG) { Console.Error.WriteLine("Expected: {0}", tableCount); }
							while (br.BaseStream.Position != br.BaseStream.Length)
							{
								tblManager265.TableMapWorldmapFieldobj.Add(new map_worldmap_fieldobjFLO
								{
									MapWorldmapFieldobjId = br.ReadUInt32(),
									FieldEventId = br.ReadUInt32(),
									MapId = br.ReadUInt32(),
									ObjId = br.ReadUInt32(),
									PosX = br.ReadSingle(),
									PosY = br.ReadSingle(),
									ObjScale = br.ReadSingle(),
									ObjRotateY = br.ReadSingle(),
									ObjTouchWidth = br.ReadSingle(),
									ObjTouchHeight = br.ReadSingle(),
									ActionPeriod = br.ReadSingle(),
									ActionId = br.ReadUInt32()
								});
								ii += 1;
							}
							if (DumpDEBUG) { Console.Error.WriteLine("Total = {0}", ii); }
							if (tableCount != ii) { Console.Error.WriteLine("ERROR: {0} ENTRY COUNTS DO NOT MATCH! {1} / {2}", baseName, ii, tableCount); }
						}
					}
					if (outputJSON) { File.WriteAllText(outFile, JsonConvert.SerializeObject(tblManager265, Formatting.Indented)); }
					return tblManager265;
*/