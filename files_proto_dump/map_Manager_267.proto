syntax = "proto3";

package ReFLO;

//  Manager_267
message mapFLO {
	uint32	map_id	= 1;
	int32	showIndex	= 2;
	int32	selectEnable	= 3;
	uint32	advmapId	= 4;
	uint32	regionId	= 5;
	uint32	districtTextId	= 6;
	uint32	mapTextId	= 7;
	uint32	mapIntroId	= 8;
	int32	difficult	= 9;
	uint32	iconResId	= 10;
	float	posX	= 11;		//	Single
	float	posY	= 12;		//	Single
	uint32	conditionFlag	= 13;
	uint32	conditionTextId	= 14;
	uint32	conditionTextId_kinkon	= 15;
	int32	conditionLevel	= 16;
	int32	recommendLevel	= 17;
	int32	cost	= 18;
	int32	worldMapEnable	= 19;
	uint32	worldMapSymbolId	= 20;
	float	worldMapPosX	= 21;		//	Single
	float	worldMapPosY	= 22;		//	Single
}

message tablemapFLO { repeated mapFLO tableMap = 1; }

/*
cd E:\OneDrive\FLO\ReFLO\ReFLO\Proto\Def; ..\..\..\packages\Google.Protobuf.Tools.3.19.4\tools\windows_x64\protoc --proto_path=. --csharp_out=..\Gen map_Manager_267.proto


			   case "map.bytes":
					ii = 0;
					tablemap tblManager267 = new tablemap { };
					using (MemoryStream sr = new MemoryStream(data))
					{
						using (BinaryReader br = new BinaryReader(sr, Encdg))
						{
							uint tableCount = br.ReadUInt32();
							if (DumpDEBUG) { Console.Error.WriteLine("Expected: {0}", tableCount); }
							while (br.BaseStream.Position != br.BaseStream.Length)
							{
								tblManager267.TableMap.Add(new mapFLO
								{
									MapId = br.ReadUInt32(),
									ShowIndex = br.ReadInt32(),
									SelectEnable = br.ReadInt32(),
									AdvmapId = br.ReadUInt32(),
									RegionId = br.ReadUInt32(),
									DistrictTextId = br.ReadUInt32(),
									MapTextId = br.ReadUInt32(),
									MapIntroId = br.ReadUInt32(),
									Difficult = br.ReadInt32(),
									IconResId = br.ReadUInt32(),
									PosX = br.ReadSingle(),
									PosY = br.ReadSingle(),
									ConditionFlag = br.ReadUInt32(),
									ConditionTextId = br.ReadUInt32(),
									ConditionTextIdKinkon = br.ReadUInt32(),
									ConditionLevel = br.ReadInt32(),
									RecommendLevel = br.ReadInt32(),
									Cost = br.ReadInt32(),
									WorldMapEnable = br.ReadInt32(),
									WorldMapSymbolId = br.ReadUInt32(),
									WorldMapPosX = br.ReadSingle(),
									WorldMapPosY = br.ReadSingle()
								});
								ii += 1;
							}
							if (DumpDEBUG) { Console.Error.WriteLine("Total = {0}", ii); }
							if (tableCount != ii) { Console.Error.WriteLine("ERROR: {0} ENTRY COUNTS DO NOT MATCH! {1} / {2}", baseName, ii, tableCount); }
						}
					}
					if (outputJSON) { File.WriteAllText(outFile, JsonConvert.SerializeObject(tblManager267, Formatting.Indented)); }
					return tblManager267;
*/