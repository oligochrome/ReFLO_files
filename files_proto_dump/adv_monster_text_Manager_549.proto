syntax = "proto3";

package ReFLO;

//  Manager_549
message adv_monster_textFLO {
	uint32	adv_monster_text_id	= 1;
	uint32	monsterObjId	= 2;
	uint32	textIdOnAIActive	= 3;
	uint32	textIdOnDead	= 4;
	uint32	vector[0]	= 5;
	uint32	vector[1]	= 6;
	uint32	vector[2]	= 7;
	uint32	vector[3]	= 8;
	uint32	vector[4]	= 9;
	uint32	vector[5]	= 10;
	uint32	vector[6]	= 11;
	uint32	vector[7]	= 12;
	uint32	talkerOnAIActiveObjId	= 13;
	uint32	talkerOnDeadObjId	= 14;
	uint32	vector[0]	= 15;
	uint32	vector[1]	= 16;
	uint32	vector[2]	= 17;
	uint32	vector[3]	= 18;
	uint32	vector[4]	= 19;
	uint32	vector[5]	= 20;
	uint32	vector[6]	= 21;
	uint32	vector[7]	= 22;
}

message tableadv_monster_textFLO { repeated adv_monster_textFLO tableAdvMonsterText = 1; }

/*
cd E:\OneDrive\FLO\ReFLO\ReFLO\Proto\Def; ..\..\..\packages\Google.Protobuf.Tools.3.19.4\tools\windows_x64\protoc --proto_path=. --csharp_out=..\Gen adv_monster_text_Manager_549.proto


			   case "adv_monster_text.bytes":
					ii = 0;
					tableadv_monster_text tblManager549 = new tableadv_monster_text { };
					using (MemoryStream sr = new MemoryStream(data))
					{
						using (BinaryReader br = new BinaryReader(sr, Encdg))
						{
							uint tableCount = br.ReadUInt32();
							if (DumpDEBUG) { Console.Error.WriteLine("Expected: {0}", tableCount); }
							while (br.BaseStream.Position != br.BaseStream.Length)
							{
								tblManager549.TableAdvMonsterText.Add(new adv_monster_textFLO
								{
									AdvMonsterTextId = br.ReadUInt32(),
									MonsterObjId = br.ReadUInt32(),
									TextIdOnAIActive = br.ReadUInt32(),
									TextIdOnDead = br.ReadUInt32(),
									Vector[0] = br.ReadUInt32(),
									Vector[1] = br.ReadUInt32(),
									Vector[2] = br.ReadUInt32(),
									Vector[3] = br.ReadUInt32(),
									Vector[4] = br.ReadUInt32(),
									Vector[5] = br.ReadUInt32(),
									Vector[6] = br.ReadUInt32(),
									Vector[7] = br.ReadUInt32()									TalkerOnAIActiveObjId = br.ReadUInt32(),
									TalkerOnDeadObjId = br.ReadUInt32(),

								});
								ii += 1;
							}
							if (DumpDEBUG) { Console.Error.WriteLine("Total = {0}", ii); }
							if (tableCount != ii) { Console.Error.WriteLine("ERROR: {0} ENTRY COUNTS DO NOT MATCH! {1} / {2}", baseName, ii, tableCount); }
						}
					}
					if (outputJSON) { File.WriteAllText(outFile, JsonConvert.SerializeObject(tblManager549, Formatting.Indented)); }
					return tblManager549;
*/